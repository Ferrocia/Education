class Node():
  def __init__(self, key):
    self.left = None
    self.right = None
    self.key = key

class BST():
  def __init__(self):
    self.root = None

  def _insert_recursive(self, value, node):
    if value < node.key:
      if not node.left:
        node.left = Node(value)
        return None
      else:
        self._insert_recursive(value, node.left)
    elif value > node.key:
      if not node.right:
        node.right = Node(value)
        return None
      else:
        self._insert_recursive(value, node.right)
    else:
      return None

  def insert_unit(self, value):
    if not self.root:
      self.root = Node(value)
    else:
      self._insert_recursive(value, self.root)

  def insert_array(self, values):
    for value in values:
      self.insert_unit(value)

  def search(self, value):
    return self._search_recursive(self.root, value)

  def _search_recursive(self, node, value):
    if node is None:
      return False
    if node.key == value:
      return True
    elif value < node.key:
      return self._search_recursive(node.left, value)
    else:
      return self._search_recursive(node.right, value)

  def delete(self, value):
    self.root = self._delete_recursive(self.root, value)

  def _delete_recursive(self, node, value):
    if node is None:
      return node
    if value < node.key:
      node.left = self._delete_recursive(node.left, value)
    elif value > node.key:
      node.right = self._delete_recursive(node.right, value)
    else:
      if node.left is None and node.right is None:
        return None
      elif node.left is None:
        return node.right
      elif node.right is None:
        return node.left
      else:
        min_node = self._find_min(node.right)
        node.key = min_node.key
        node.right = self._delete_recursive(node.right, min_node.key)
    return node

  def _find_min(self, node):
    while node.left:
      node = node.left
    return node

  def in_order_traversal(self):
    result = []
    self._in_order_recursive(self.root, result)
    return result

  def _in_order_recursive(self, node, result):
    if node:
      self._in_order_recursive(node.left, result)
      result.append(node.key)
      self._in_order_recursive(node.right, result)

tree = BST()
tree.insert_array([8, 3, 10, 1, 6, 14, 4, 7, 13])

print("In-order traversal:", tree.in_order_traversal())
print("Search 6:", tree.search(6))
print("Search 15:", tree.search(15))
tree.delete(3)
print("After deleting 3:", tree.in_order_traversal())
tree.delete(10)
print("After deleting 10:", tree.in_order_traversal())
